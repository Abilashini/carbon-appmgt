{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "WSO2 APP Manager - Publisher API",
        "description": "This document specifies a **RESTful API** for WSO2 **APP Manager** - Publisher.\n\n\n\n\nIt is written with [swagger 2](http://swagger.io/).\n",
        "contact": {
            "name": "WSO2",
            "url": "http://wso2.com/products/app-manager/",
            "email": "architecture@wso2.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "schemes": [
        "http"
    ],
    "host": "apis.wso2.com",
    "basePath": "/api/appm/publisher/v1.0",
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/apps/{appType}": {
            "get": {
                "x-scope": "appm:read",
                "summary": "Get all Apps",
                "description": "Get a list of available Apps qualifying under a given search condition.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "**Search condition**.\n\n\n\n\nYou can search in attributes by using an **\"attribute:\"** modifier.\n\n\n\n\nEg. \"provider:wso2\" will match an App if the provider of the App contains \"wso2\".\n\n\n\n\nSupported attribute modifiers are [*provider, app_name, app_version, app_id**]\n\n\n\n\nIf no advanced attribute modifier has been specified, search will match the\ngiven query string against App Name.\n",
                        "type": "string"
                    },
                    {
                        "$ref": "#/parameters/fieldFilter"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    }
                ],
                "tags": [
                    "Apps"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nList of qualifying Apps is returned.\n",
                        "schema": {
                            "$ref": "#/definitions/AppList"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "x-scope": "appm:create",
                "summary": "Create a new App",
                "description": "Create a new App\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "App object that needs to be added\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/App"
                        }
                    },
                    {
                        "$ref": "#/parameters/Content-Type"
                    },
                    {
                        "$ref": "#/parameters/If-Modified-Since"
                    }
                ],
                "tags": [
                    "Apps"
                ],
                "responses": {
                    "201": {
                        "description": "Created. \nSuccessful response with the newly created object as entity in the body. \nLocation header contains URL of newly created entity.\n",
                        "schema": {
                            "$ref": "#/definitions/App"
                        },
                        "headers": {
                            "Location": {
                                "description": "The URL of the newly created resource.\n",
                                "type": "string"
                            },
                            "Content-Type": {
                                "description": "The content type of the body.\n",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional request\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type. \nThe entity of the request was in a not supported format.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apps/{appType}/id/{appId}": {
            "get": {
                "x-scope": "appm:read",
                "summary": "Get app details",
                "description": "Get details of an app.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "$ref": "#/parameters/appId"
                    },
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Modified-Since"
                    }
                ],
                "tags": [
                    "Apps"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nQualifying App is returned.\n",
                        "schema": {
                            "$ref": "#/definitions/AppInfo"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "x-scope": "appm:update",
                "summary": "Update an existing App",
                "description": "Update an existing App\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "$ref": "#/parameters/appId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "App object that needs to be added\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/App"
                        }
                    },
                    {
                        "$ref": "#/parameters/Content-Type"
                    },
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "tags": [
                    "Apps"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nSuccessful response with updated App object\n",
                        "schema": {
                            "$ref": "#/definitions/App"
                        },
                        "headers": {
                            "Location": {
                                "description": "The URL of the newly created resource.\n",
                                "type": "string"
                            },
                            "Content-Type": {
                                "description": "The content type of the body.\n",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional request.\n",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the resource has been modifed the last time. \nUsed by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "x-scope": "appm:create",
                "summary": "Delete App",
                "description": "Delete an existing App\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "$ref": "#/parameters/appId"
                    },
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "tags": [
                    "Apps"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nResource successfully deleted.\n"
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nResource to be deleted does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apps/{appType}/id/{appId}/xacmlpolicies/{policyPartialId}": {
            "delete": {
                "x-scope": "appm:create",
                "summary": "Delete policy partial mapping from an App",
                "description": "Delete policy partial mapping from an App\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "$ref": "#/parameters/appId"
                    },
                    {
                        "$ref": "#/parameters/policyPartialId"
                    },
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "tags": [
                    "Apps"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nResource successfully deleted.\n"
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nResource to be deleted does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apps/{appType}/id/{appId}/tags": {
            "get": {
                "x-scope": "appm:read",
                "summary": "Get all Tags of an App",
                "description": "Get a list of available Tags relevant to given App Internal Id.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "$ref": "#/parameters/appId"
                    },
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    }
                ],
                "tags": [
                    "Tags"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nList of qualifying Apps is returned.\n",
                        "schema": {
                            "$ref": "#/definitions/TagList"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "x-scope": "appm:create",
                "summary": "Add a new tag",
                "description": "Add a new tag into tag collection of a given application type.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "$ref": "#/parameters/appId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Tag object that needs to be added\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TagList"
                        }
                    },
                    {
                        "$ref": "#/parameters/Content-Type"
                    },
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "tags": [
                    "Tags"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nSuccessful response with updated App object\n",
                        "schema": {
                            "$ref": "#/definitions/App"
                        },
                        "headers": {
                            "Location": {
                                "description": "The URL of the newly created resource.\n",
                                "type": "string"
                            },
                            "Content-Type": {
                                "description": "The content type of the body.\n",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional request.\n",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the resource has been modifed the last time. \nUsed by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "x-scope": "appm:create",
                "summary": "Delete Tags relevant to an App by App Internal Id",
                "description": "Delete an existing App\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "$ref": "#/parameters/appId"
                    },
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Tag object that needs to be added\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TagList"
                        }
                    }
                ],
                "tags": [
                    "Tags"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nResource successfully deleted.\n"
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nResource to be deleted does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apps/{appType}/id/{appId}/xacmlpolicies": {
            "get": {
                "x-scope": "appm:read",
                "summary": "Get all XACML policies relevant to an App",
                "description": "Get a list of XACML policies relevant to an App.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "$ref": "#/parameters/appId"
                    },
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    }
                ],
                "tags": [
                    "Apps"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nList of XACML policies is returned.\n",
                        "schema": {
                            "$ref": "#/definitions/PolicyPartialList"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Assign a policy partial to an App",
                "description": "Assign a policy partial to an App\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "$ref": "#/parameters/appId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "App object that needs to be added\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PolicyPartialIdList"
                        }
                    },
                    {
                        "$ref": "#/parameters/Content-Type"
                    },
                    {
                        "$ref": "#/parameters/If-Modified-Since"
                    }
                ],
                "tags": [
                    "Apps"
                ],
                "responses": {
                    "202": {
                        "description": "Accepted.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type. \nThe entity of the request was in a not supported format.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apps/{appType}/appId/{appId}/subscriptions": {
            "get": {
                "x-scope": "appm:read",
                "summary": "Get subscribed user list for an App",
                "description": "Get subscribed user list for an App.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "$ref": "#/parameters/appId"
                    },
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Modified-Since"
                    }
                ],
                "tags": [
                    "Apps"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nQualifying User List is returned.\n",
                        "schema": {
                            "$ref": "#/definitions/UserIdList"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apps/{appType}/id/{appId}/create-new-version": {
            "post": {
                "x-scope": "appm:create",
                "summary": "Create a new version of an App",
                "description": "Create a new version of an App\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "$ref": "#/parameters/appId"
                    },
                    {
                        "$ref": "#/parameters/Content-Type"
                    },
                    {
                        "$ref": "#/parameters/If-Modified-Since"
                    }
                ],
                "tags": [
                    "Apps"
                ],
                "responses": {
                    "201": {
                        "description": "Created. \nSuccessful response with the newly created object as entity in the body. \nLocation header contains URL of newly created entity.\n",
                        "schema": {
                            "$ref": "#/definitions/App"
                        },
                        "headers": {
                            "Location": {
                                "description": "The URL of the newly created resource.\n",
                                "type": "string"
                            },
                            "Content-Type": {
                                "description": "The content type of the body.\n",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional request\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type. \nThe entity of the request was in a not supported format.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apps/{appType}/appId/{appId}/lifecycle": {
            "get": {
                "x-scope": "appm:read",
                "summary": "Get lifecycle details",
                "description": "Get lifecycle details.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "$ref": "#/parameters/appId"
                    },
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    }
                ],
                "tags": [
                    "Lifecycle"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nList of qualifying Apps is returned.\n",
                        "schema": {
                            "$ref": "#/definitions/LifeCycle"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apps/{appType}/appId/{appId}/lifecycle-history": {
            "get": {
                "x-scope": "appm:read",
                "summary": "Get lifecycle details",
                "description": "Get lifecycle details.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "$ref": "#/parameters/appId"
                    },
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    }
                ],
                "tags": [
                    "Lifecycle"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nList of qualifying Apps is returned.\n",
                        "schema": {
                            "$ref": "#/definitions/LifeCycle"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apps/{appType}/change-lifecycle": {
            "post": {
                "x-scope": "appm:publish",
                "summary": "Change App Status",
                "description": "Change the lifecycle of an App\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "name": "action",
                        "description": "The action to demote or promote the state of the App.\n\n\n\n\nSupported actions are [ **Publish,Approve,Reject,Unpublish,Deprecate,Retire,Recycle,Re-Publish,Submit#for#Review **]\n",
                        "in": "query",
                        "type": "string",
                        "required": true,
                        "enum": [
                            "Publish",
                            "Approve",
                            "Reject",
                            "Unpublish",
                            "Deprecate",
                            "Retire",
                            "Recycle",
                            "Re-Publish",
                            "Submit#for#Review"
                        ]
                    },
                    {
                        "$ref": "#/parameters/appId-Q"
                    },
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "tags": [
                    "Apps"
                ],
                "responses": {
                    "202": {
                        "schema": {
                            "$ref": "#/definitions/ResponseMessage"
                        },
                        "description": "OK. \nLifecycle changed successfully.\n",
                        "headers": {
                            "ETag": {
                                "description": "Entity Tag of the App. Used by caches, or in conditional request.\n",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the App lifecycle has been modified the last time. \nUsed by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nRequested App does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apps/{appType}/validate-context": {
            "post": {
                "x-scope": "appm:create",
                "summary": "Validate App Context",
                "description": "Validate App Context.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "$ref": "#/parameters/appContext"
                    },
                    {
                        "$ref": "#/parameters/Content-Type"
                    },
                    {
                        "$ref": "#/parameters/If-Modified-Since"
                    }
                ],
                "tags": [
                    "App"
                ],
                "responses": {
                    "200": {
                        "description": "OK.\n"
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type. \nThe entity of the request was in a not supported format.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apps/mobile/binaries": {
            "post": {
                "consumes": [
                    "multipart/form-data"
                ],
                "x-scope": "appm:create",
                "summary": "Uploading binary files",
                "description": "Uploading .apk/.IPA binary files.\n",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "file",
                        "description": "Document to upload",
                        "type": "file",
                        "required": false
                    },
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "tags": [
                    "MobileApps"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nBinary file uploaded successfully.\n",
                        "schema": {
                            "$ref": "#/definitions/Binary"
                        },
                        "headers": {
                            "ETag": {
                                "description": "Entity Tag of the changed App. Used by caches, or in conditional request.\n",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the resource has been modified the last. \nUsed by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nRequested App does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apps/static-contents": {
            "post": {
                "consumes": [
                    "multipart/form-data"
                ],
                "x-scope": "appm:create",
                "summary": "Uploading images, pdf, documents files",
                "description": "Uploading images for banners, screenshots etc.\n",
                "parameters": [
                    {
                        "in": "formData",
                        "name": "file",
                        "description": "Document to upload",
                        "type": "file",
                        "required": false
                    },
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "tags": [
                    "MobileApps"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nStatic content uploaded successfully.\n",
                        "schema": {
                            "$ref": "#/definitions/StaticContent"
                        },
                        "headers": {
                            "ETag": {
                                "description": "Entity Tag of the changed App. Used by caches, or in conditional request.\n",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the resource has been modified the last. \nUsed by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nRequested entity does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apps/static-contents/{fileName}": {
            "get": {
                "x-scope": "appm:read",
                "summary": "Retrieving images, pdf, documents files",
                "description": "Retrieving images for banners, screenshots etc.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/fileName"
                    },
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "tags": [
                    "MobileApps"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nStatic content Retrived successfully.\n",
                        "schema": {
                            "type": "file"
                        },
                        "headers": {
                            "ETag": {
                                "description": "Entity Tag of the changed App. Used by caches, or in conditional request.\n",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the resource has been modified the last. \nUsed by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nRequested entity does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apps/{appType}/tags": {
            "get": {
                "x-scope": "appm:read",
                "summary": "Get all Tags",
                "description": "Get a list of available Tags relevant to given App Type.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    }
                ],
                "tags": [
                    "Tags"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nList of qualifying Apps is returned.\n",
                        "schema": {
                            "$ref": "#/definitions/TagList"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apps/{appType}/id/{appId}/throttlingtiers": {
            "get": {
                "x-scope": "appm:read",
                "summary": "Get all Tiers",
                "description": "Get a list of Tiers.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "$ref": "#/parameters/appId"
                    },
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    }
                ],
                "tags": [
                    "Tiers"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nList of Tiers is returned.\n",
                        "schema": {
                            "$ref": "#/definitions/TierList"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/apps/{appType}/cache": {
            "get": {
                "x-scope": "appm:read",
                "summary": "Get all Apps from Cache",
                "description": "Get a list of available Apps qualifying under a given search condition.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/appType"
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "**Search condition**.\n\n\n\n\nYou can search in attributes by using an **\"attribute:\"** modifier.\n\n\n\n\nEg. \"provider:wso2\" will match an App if the provider of the App contains \"wso2\".\n\n\n\n\nSupported attribute modifiers are [*provider, app_name, app_version, app_id**]\n\n\n\n\nIf no advanced attribute modifier has been specified, search will match the\ngiven query string against App Name.\n",
                        "type": "string"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    }
                ],
                "tags": [
                    "Apps"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nList of qualifying Apps is returned.\n",
                        "schema": {
                            "$ref": "#/definitions/AppList"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/xacmlpolicies/": {
            "get": {
                "x-scope": "appm:create",
                "summary": "Get all XACML policies",
                "description": "Get a list of XACML policies.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    }
                ],
                "tags": [
                    "XACMLPolicies"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nList of XACML policies is returned.\n",
                        "schema": {
                            "$ref": "#/definitions/PolicyPartialList"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/xacmlpolicies/{policyPartialId}/apps": {
            "get": {
                "x-scope": "appm:read",
                "summary": "Get all Apps mapped to a policy partial",
                "description": "Get a list of available Apps mapped to a policy partial.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/policyPartialId"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    }
                ],
                "tags": [
                    "Apps"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nList of qualifying Apps is returned.\n",
                        "schema": {
                            "$ref": "#/definitions/AppList"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/administration/policygroups/{policyGroupId}/apps": {
            "get": {
                "x-scope": "appm:read",
                "summary": "Get apps associated with policy group",
                "description": "Get apps associated with policy group.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/policyGroupId"
                    },
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Modified-Since"
                    }
                ],
                "tags": [
                    "PolicyGroups"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nList of qualifying Apps is returned.\n",
                        "schema": {
                            "$ref": "#/definitions/AppList"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/administration/xacmlpolicies/validate": {
            "post": {
                "x-scope": "appm:administration",
                "summary": "Validate Policy contenr",
                "description": "Create a new App\n",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "App object that needs to be added\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PolicyPartial"
                        }
                    },
                    {
                        "$ref": "#/parameters/Content-Type"
                    },
                    {
                        "$ref": "#/parameters/If-Modified-Since"
                    }
                ],
                "tags": [
                    "XACMLPolicies"
                ],
                "responses": {
                    "200": {
                        "description": "OK.\n",
                        "headers": {
                            "ETag": {
                                "description": "Entity Tag of the App. Used by caches, or in conditional request.\n",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the App lifecycle has been modified the last time. \nUsed by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type. \nThe entity of the request was in a not supported format.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/administration/xacmlpolicies/": {
            "post": {
                "x-scope": "appm:administration",
                "summary": "Create a new Policy Partial",
                "description": "Create a new Policy Partial.\n",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "App object that needs to be added\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PolicyPartial"
                        }
                    },
                    {
                        "$ref": "#/parameters/Content-Type"
                    },
                    {
                        "$ref": "#/parameters/If-Modified-Since"
                    }
                ],
                "tags": [
                    "XACMLPolicies"
                ],
                "responses": {
                    "201": {
                        "description": "Created. \nSuccessful response with the newly created object as entity in the body. \nLocation header contains URL of newly created entity.\n",
                        "schema": {
                            "$ref": "#/definitions/PolicyPartial"
                        },
                        "headers": {
                            "Location": {
                                "description": "The URL of the newly created resource.\n",
                                "type": "string"
                            },
                            "Content-Type": {
                                "description": "The content type of the body.\n",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional request\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "415": {
                        "description": "Unsupported Media Type. \nThe entity of the request was in a not supported format.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/administration/xacmlpolicies/{policyPartialId}": {
            "put": {
                "x-scope": "appm:administration",
                "summary": "Update an existing policy partial",
                "description": "Update an existing policy partial\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/policyPartialId"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "App object that needs to be added\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PolicyPartial"
                        }
                    },
                    {
                        "$ref": "#/parameters/Content-Type"
                    },
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "tags": [
                    "XACMLPolicies"
                ],
                "responses": {
                    "200": {
                        "description": "OK.\n",
                        "headers": {
                            "ETag": {
                                "description": "Entity Tag of the App. Used by caches, or in conditional request.\n",
                                "type": "string"
                            },
                            "Last-Modified": {
                                "description": "Date and time the App lifecycle has been modified the last time. \nUsed by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "x-scope": "appm:administration",
                "summary": "Get policy partial details",
                "description": "Get policy partial.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/policyPartialId"
                    },
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Modified-Since"
                    }
                ],
                "tags": [
                    "XACMLPolicies"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nQualifying App is returned.\n",
                        "schema": {
                            "$ref": "#/definitions/PolicyPartial"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "x-scope": "appm:administration",
                "summary": "Delete policy partial",
                "description": "Delete an existing policy partial\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/policyPartialId"
                    },
                    {
                        "$ref": "#/parameters/If-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Unmodified-Since"
                    }
                ],
                "tags": [
                    "Apps"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nResource successfully deleted.\n"
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nResource to be deleted does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Precondition Failed. \nThe request has not been performed because one of the preconditions is not met.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "x-scope": "appm:create",
                "summary": "Get all Roles",
                "description": "Get a list of available Roles.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    }
                ],
                "tags": [
                    "Roles"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nList of qualifying Roles are returned.\n",
                        "schema": {
                            "$ref": "#/definitions/RoleIdList"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/javapolicies": {
            "get": {
                "x-scope": "appm:create",
                "summary": "Get available java policies",
                "description": "Get available java policies.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/isGlobal"
                    },
                    {
                        "$ref": "#/parameters/Accept"
                    },
                    {
                        "$ref": "#/parameters/If-None-Match"
                    },
                    {
                        "$ref": "#/parameters/If-Modified-Since"
                    }
                ],
                "tags": [
                    "JavaPolicies"
                ],
                "responses": {
                    "200": {
                        "description": "OK. \nQualifying App is returned.\n",
                        "schema": {
                            "$ref": "#/definitions/JavaPolicyList"
                        },
                        "headers": {
                            "Content-Type": {
                                "description": "The content type of the body.",
                                "type": "string"
                            },
                            "ETag": {
                                "description": "Entity Tag of the response resource. Used by caches, or in conditional requests.\n",
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request. \nInvalid request or validation error.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden. \nThe request must be conditional but no condition has been specified.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Not Found. \nThe resource to be updated does not exist.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "parameters": {
        "appId": {
            "name": "appId",
            "in": "path",
            "description": "**APP ID** consisting of the **UUID** of the App. \nThe combination of the provider of the app, name of the appId and the version is also accepted as a valid App ID.\nShould be formatted as **provider-name-version**.\n",
            "required": true,
            "type": "string"
        },
        "appType": {
            "name": "appType",
            "in": "path",
            "description": "App Type. Either webapp or mobileapp\n",
            "required": true,
            "type": "string"
        },
        "policyGroupId": {
            "name": "policyGroupId",
            "in": "path",
            "description": "policy group id\n",
            "required": true,
            "type": "integer"
        },
        "policyPartialId": {
            "name": "policyPartialId",
            "in": "path",
            "description": "policy partial id\n",
            "required": true,
            "type": "integer"
        },
        "appId-Q": {
            "name": "appId",
            "in": "query",
            "description": "**appId ID** consisting of the **UUID** of the App. \nThe combination of the provider of the appId, name of the appId and the version is also accepted as a valid App ID.\nShould be formatted as **provider-name-version**.\n",
            "required": true,
            "type": "string"
        },
        "appContext": {
            "name": "appContext",
            "in": "query",
            "description": "Application Context",
            "required": true,
            "type": "string"
        },
        "isGlobal": {
            "name": "isGlobal",
            "in": "query",
            "description": "Either global policy or not. Default value is 'true'.",
            "required": false,
            "default": true,
            "type": "boolean"
        },
        "fieldFilter": {
            "name": "field-filter",
            "description": "Used to limit the fields in response.\n\n\n\n\nSupported filters are [ **basic,all**]\n",
            "in": "query",
            "type": "string",
            "required": false,
            "default": "basic",
            "enum": [
                "basic",
                "all"
            ]
        },
        "limit": {
            "name": "limit",
            "in": "query",
            "description": "Maximum size of resource array to return.\n",
            "default": 25,
            "type": "integer"
        },
        "offset": {
            "name": "offset",
            "in": "query",
            "description": "Starting point within the complete list of items qualified.  \n",
            "default": 0,
            "type": "integer"
        },
        "fileName": {
            "name": "fileName",
            "in": "path",
            "description": "**APP ID** consisting of the **UUID** of the App. \nThe combination of the provider of the app, name of the appId and the version is also accepted as a valid App ID.\nShould be formatted as **provider-name-version**.\n",
            "required": true,
            "type": "string"
        },
        "Accept": {
            "name": "Accept",
            "in": "header",
            "description": "Media types acceptable for the response. Default is JSON.\n",
            "default": "JSON",
            "type": "string"
        },
        "Content-Type": {
            "name": "Content-Type",
            "in": "header",
            "description": "Media type of the entity in the body. Default is JSON.\n",
            "default": "JSON",
            "required": true,
            "type": "string"
        },
        "If-None-Match": {
            "name": "If-None-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resourec.\n",
            "type": "string"
        },
        "If-Modified-Since": {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Validator for conditional requests; based on Last Modified header of the \nformerly retrieved variant of the resource.\n",
            "type": "string"
        },
        "If-Match": {
            "name": "If-Match",
            "in": "header",
            "description": "Validator for conditional requests; based on ETag.\n",
            "type": "string"
        },
        "If-Unmodified-Since": {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Validator for conditional requests; based on Last Modified header.\n",
            "type": "string"
        }
    },
    "definitions": {
        "AppList": {
            "title": "App List",
            "properties": {
                "count": {
                    "type": "integer",
                    "description": "Number of App returned.\n",
                    "example": 1
                },
                "next": {
                    "type": "string",
                    "description": "Link to the next subset of resources qualified. \nEmpty if no more resources are to be returned.\n",
                    "example": "/app?limit=1&offset=2&query="
                },
                "previous": {
                    "type": "string",
                    "description": "Link to the previous subset of resources qualified. \nEmpty if current subset is the first subset returned.\n",
                    "example": "/app?limit=1&offset=0&query="
                },
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AppInfo"
                    }
                }
            }
        },
        "AppInfo": {
            "title": "App Info object with basic App details.",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "01234567-0123-0123-0123-012345678901"
                },
                "name": {
                    "type": "string",
                    "example": "CalculatorApp"
                },
                "description": {
                    "type": "string",
                    "example": "A calculator App that supports basic operations"
                },
                "context": {
                    "type": "string",
                    "example": "CalculatorApp"
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0"
                },
                "provider": {
                    "description": "If the provider value is not given, the user invoking the App will be used as the provider.\n",
                    "type": "string",
                    "example": "admin"
                },
                "lifecycleState": {
                    "type": "string",
                    "example": "CREATED"
                }
            }
        },
        "App": {
            "title": "App object",
            "required": [
                "name",
                "version",
                "displayName"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "UUID of the app registry artifact\n",
                    "example": "01234567-0123-0123-0123-012345678901"
                },
                "name": {
                    "type": "string",
                    "example": "CalculatorApp"
                },
                "type": {
                    "type": "string",
                    "description": "App type (either Webapp/Mobile app)",
                    "example": "webapp,mobileapp"
                },
                "appmeta": {
                    "type": "object",
                    "properties": {
                        "path": {
                            "type": "string",
                            "description": "Application binary file API \n",
                            "example": "/publisher/api/mobileapp/getfile/XURc4DnX0LEfRBm.apk,/publisher/api/mobileapp/getfile/OUGc8DnX0LEGRBm.ipa"
                        },
                        "package": {
                            "type": "string",
                            "description": "The package name of the application binary\n",
                            "example": "home.jmstudios.calc"
                        },
                        "version": {
                            "type": "string",
                            "description": "The version of the application binary\n",
                            "example": "1.0"
                        },
                        "weburl": {
                            "type": "string",
                            "description": "Web application urk\n",
                            "example": "http://sample.com"
                        }
                    }
                },
                "marketType": {
                    "type": "string",
                    "example": "enterprise,"
                },
                "recentChanges": {
                    "description": "recent changes",
                    "type": "string",
                    "example": "update details"
                },
                "icon": {
                    "description": "the image icon of the application\n",
                    "type": "string",
                    "example": "/publisher/api/mobileapp/getfile/TJXfaEeHsdeYSFS.jpg,/publisher/api/mobileapp/getfile/aCJ1MXUXWGGHS3t.JPG"
                },
                "isSite": {
                    "type": "string",
                    "description": "Either a webapp or site",
                    "example": "for sites - TRUE"
                },
                "description": {
                    "type": "string",
                    "example": "A calculator App that supports basic operations"
                },
                "context": {
                    "type": "string",
                    "example": "CalculatorApp"
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0"
                },
                "provider": {
                    "description": "If the provider value is not given user invoking the api will be used as the provider.\n",
                    "type": "string",
                    "example": "admin"
                },
                "appDefinition": {
                    "description": "Swagger definition of the App which contains details about URI templates and scopes\n",
                    "type": "string",
                    "example": "{\"paths\":{\"\\/substract\":{\"get\":{\"x-auth-type\":\"Application & Application User\",\"x-throttling-tier\":\"Unlimited\",\"parameters\":[{\"name\":\"x\",\"required\":true,\"type\":\"string\",\"in\":\"query\"},{\"name\":\"y\",\"required\":true,\"type\":\"string\",\"in\":\"query\"}],\"responses\":{\"200\":{}}}},\"\\/add\":{\"get\":{\"x-auth-type\":\"Application & Application User\",\"x-throttling-tier\":\"Unlimited\",\"parameters\":[{\"name\":\"x\",\"required\":true,\"type\":\"string\",\"in\":\"query\"},{\"name\":\"y\",\"required\":true,\"type\":\"string\",\"in\":\"query\"}],\"responses\":{\"200\":{}}}}},\"swagger\":\"2.0\",\"info\":{\"title\":\"CalculatorApp\",\"version\":\"1.0.0\"}}"
                },
                "isDefaultVersion": {
                    "type": "boolean",
                    "example": false
                },
                "transport": {
                    "description": "Supported transports for the App (http and/or https).\n",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "http",
                        "https"
                    ]
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "substract",
                        "add"
                    ]
                },
                "thumbnailUrl": {
                    "type": "string",
                    "example": ""
                },
                "visibleRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": []
                },
                "path": {
                    "description": "path of asset",
                    "type": "string",
                    "example": "/_system/governance/mobileapps/admin/webapp/m1/1"
                },
                "resourceId": {
                    "description": "Resource Id path of the asset\n",
                    "type": "string",
                    "example": "/_system/governance/mobileapps/admin/android/test/1.0"
                },
                "lifecycle": {
                    "description": "lifecycle type of the asset\n",
                    "type": "string",
                    "example": "MobileAppLifeCycle"
                },
                "lifecycleState": {
                    "description": "lifecycle state of the asset\n",
                    "type": "string",
                    "example": "Created"
                },
                "appUrL": {
                    "description": "URL of the asset\n",
                    "type": "string",
                    "example": "/publisher/api/mobileapp/getfile/WKzeMgMhOrGvwTy.apk"
                },
                "bundleversion": {
                    "description": "Bundleversion of the asset\n",
                    "type": "string",
                    "example": "1.0"
                },
                "category": {
                    "description": "category of the asset\n",
                    "type": "string",
                    "example": "Business"
                },
                "displayName": {
                    "description": "displayName of the asset\n",
                    "type": "string",
                    "example": "testapp1"
                },
                "screenshots": {
                    "description": "Screenshots attached to the application\n",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "/publisher/api/mobileapp/getfile/TJXfaEeHsdeYSFS.jpg",
                        "/publisher/api/mobileapp/getfile/aCJ1MXUXWGGHS3t.JPG",
                        "/publisher/api/mobileapp/getfile/FcFEWkaLroetXlq.JPG"
                    ]
                },
                "banner": {
                    "description": "/publisher/api/mobileapp/getfile/uWnObGDXigTO7pl.jpg\n",
                    "type": "string",
                    "example": "/publisher/api/mobileapp/getfile/TJXfaEeHsdeYSFS.jpg,/publisher/api/mobileapp/getfile/aCJ1MXUXWGGHS3t.JPG,/publisher/api/mobileapp/getfile/FcFEWkaLroetXlq.JPG"
                },
                "createdtime": {
                    "description": "createdtime of the asset\n",
                    "type": "string",
                    "example": "00000001458300149192"
                },
                "platform": {
                    "description": "platform of the asset\n",
                    "type": "string",
                    "example": "android"
                },
                "appType": {
                    "description": "mobile app type (eg: webapp/ios/android)",
                    "type": "string",
                    "example": "android"
                },
                "mediaType": {
                    "description": "media yype",
                    "type": "string",
                    "example": "application/vnd.wso2-mobileapp+xml"
                },
                "lifecycleAvailableActions": {
                    "description": "platform of the asset\n",
                    "type": "string",
                    "example": "[Submit for Review]"
                },
                "createdTime": {
                    "description": "asset created timestamp",
                    "type": "string",
                    "example": "00000001459919490157"
                }
            }
        },
        "Binary": {
            "title": "upload binary",
            "required": [
                "path"
            ],
            "properties": {
                "path": {
                    "type": "string",
                    "example": "/api/getFile/DTRDOIO787.apk"
                },
                "package": {
                    "type": "string",
                    "example": "sample.calc"
                },
                "version": {
                    "type": "string",
                    "example": "1.0"
                }
            }
        },
        "StaticContent": {
            "title": "upload static content like image, documentation",
            "required": [
                "path"
            ],
            "properties": {
                "path": {
                    "type": "string",
                    "example": "/api/getFile/IUYFGF98098.jpg"
                }
            }
        },
        "ResponseMessage": {
            "title": "Reponse message returned at successful API invocation",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "example": "API has been successfully invoked"
                }
            }
        },
        "TagList": {
            "title": "Tag List",
            "properties": {
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "tag1",
                        "tag2",
                        "tag3"
                    ],
                    "description": "List of Tags"
                }
            }
        },
        "TierList": {
            "title": "Throttle Tier details.",
            "properties": {
                "tierList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Tier"
                    }
                }
            }
        },
        "Tier": {
            "title": "Throttle Tier details.",
            "properties": {
                "tierName": {
                    "type": "string",
                    "example": "Gold"
                },
                "tierDisplayName": {
                    "type": "string",
                    "example": "Gold"
                },
                "tierDescription": {
                    "type": "string",
                    "example": "Gold tier with limit 20 request"
                },
                "tierSortKey": {
                    "type": "integer",
                    "example": "1"
                }
            }
        },
        "PolicyPartial": {
            "title": "Policy Partial",
            "required": [
                "policyPartial"
            ],
            "properties": {
                "policyPartialId": {
                    "type": "integer",
                    "description": "Id of the policy\n",
                    "example": "1"
                },
                "policyPartialName": {
                    "type": "string",
                    "description": "name of the policy\n",
                    "example": "policy1"
                },
                "policyPartial": {
                    "type": "string",
                    "description": "policy content\n",
                    "example": "xacml policy implementation"
                },
                "isSharedPartial": {
                    "type": "boolean",
                    "description": "whether shared or not",
                    "example": "true/false"
                },
                "policyPartialDesc": {
                    "type": "string",
                    "description": "description about the policy"
                }
            }
        },
        "PolicyPartialList": {
            "title": "Policy Partial List",
            "properties": {
                "count": {
                    "type": "integer",
                    "description": "Number of App returned.\n",
                    "example": 1
                },
                "next": {
                    "type": "string",
                    "description": "Link to the next subset of resources qualified. \nEmpty if no more resources are to be returned.\n",
                    "example": "/xacmlpolicies?limit=1&offset=2&query="
                },
                "previous": {
                    "type": "string",
                    "description": "Link to the previous subset of resources qualified. \nEmpty if current subset is the first subset returned.\n",
                    "example": "/xacmlpolicies?limit=1&offset=0&query="
                },
                "policyList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PolicyPartialInfo"
                    }
                }
            }
        },
        "PolicyPartialInfo": {
            "title": "Policy Partial",
            "properties": {
                "policyPartialId": {
                    "type": "integer",
                    "description": "Id of the policy\n",
                    "example": "1"
                },
                "policyPartialName": {
                    "type": "string",
                    "description": "name of the policy\n",
                    "example": "policy1"
                }
            }
        },
        "PolicyPartialIdList": {
            "title": "XACML policy partial Id's",
            "properties": {
                "xacmlPolicyIds": {
                    "type": "object",
                    "description": "List of XACML policy partial Id's"
                }
            }
        },
        "UserIdList": {
            "title": "User List",
            "properties": {
                "userIds": {
                    "type": "object",
                    "description": "List of User Names"
                }
            }
        },
        "RoleIdList": {
            "title": "Role List",
            "properties": {
                "roleIds": {
                    "type": "object",
                    "description": "List of Role Id's"
                }
            }
        },
        "JavaPolicyList": {
            "title": "Java Policy List",
            "properties": {
                "policyList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/JavaPolicy"
                    }
                }
            }
        },
        "JavaPolicy": {
            "title": "JavaPolicy object",
            "required": [
                "displayName"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "java policy id\n",
                    "example": "1"
                },
                "displayName": {
                    "type": "string",
                    "example": "stats handler"
                },
                "description": {
                    "type": "string"
                },
                "displayOrder": {
                    "type": "integer",
                    "description": "display order of the policy in UI\n",
                    "example": "1"
                }
            }
        },
        "LifeCycle": {
            "title": "LifeCycle object",
            "properties": {
                "state": {
                    "type": "string"
                },
                "actions": {
                    "type": "string"
                },
                "lifecycle": {
                    "type": "string"
                },
                "async": {
                    "type": "boolean"
                }
            }
        },
        "Error": {
            "title": "Error object returned with 4XX HTTP status",
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int64"
                },
                "message": {
                    "type": "string",
                    "description": "Error message."
                },
                "description": {
                    "type": "string",
                    "description": "A detail description about the error message.\n"
                },
                "moreInfo": {
                    "type": "string",
                    "description": "Preferably an url with more details about the error.\n"
                },
                "error": {
                    "type": "array",
                    "description": "If there are more than one error list them out. \nFor example, list out validation errors by each field.\n",
                    "items": {
                        "$ref": "#/definitions/ErrorListItem"
                    }
                }
            }
        },
        "ErrorListItem": {
            "title": "Description of individual errors that may have occurred during a request.",
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string",
                    "description": "Description about individual errors occurred\n"
                }
            }
        }
    }
}