<%
(function () {
    var storeConfig = require('/config/store.js').config(),
            sso = require("sso"),
            process = require("process"),
            caramel = require('caramel'),
            uuid = require('uuid'),
            util = require('/modules/util.js'),
            sessionId = session.getId(),
            requestedPage = request.getParameter("requestedPage"),
            requestURI = request.getRequestURI(),
            customDomain = request.getHeader("X-WSO2-Custom-Domain"),
            postUrl = storeConfig.ssoConfiguration.identityProviderURL,
            forceAuth = storeConfig.ssoConfiguration.isForceAuth,
            reversProxyEnabled = caramel.configs().reverseProxyEnabled,
            reverseProxyHost = caramel.configs().reverseProxyHost,
            MultitenantConstants = Packages.org.wso2.carbon.base.MultitenantConstants,
            log = new Log();
    include("/jagg/jagg.jag");
    var ssoIdpProvider = jagg.module('manager').getAPIStoreObj();

    // Extract tenant domain from request URL.
    var applicationTenantDomain = util.getTenantDomainFromUrl(requestURI);
    if (applicationTenantDomain) {
        if (log.isDebugEnabled()) {
            log.debug("User portal is accessed from a tenant aware URL for tenant: " + applicationTenantDomain);
        }
    }

    // Set ACS URL.
    if (customDomain) {
        acsUrl = "https://" + customDomain + "/acs";
        if (log.isDebugEnabled()) {
            log.debug("Custom domain : " + customDomain + " is configured. ACS URL constructed accordingly. ACS URL : "
                    + acsUrl);
        }
    } else {
        var acsUrl = storeConfig.ssoConfiguration.storeAcs;
        if (applicationTenantDomain && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(applicationTenantDomain)) {
            acsUrl = util.getTenantAwareACS(applicationTenantDomain);
            if (log.isDebugEnabled()) {
                log.debug("Constructed tenant aware ACS URL: " + acsUrl + " for tenant: " + applicationTenantDomain);
            }
        }
    }

    // Generate SAML request.
    var encodedSAMLAuthRequest;
    var isRequestSigningEnabled = storeConfig.ssoConfiguration.requestSigningEnabled;
    if (isRequestSigningEnabled) {
        if (log.isDebugEnabled()) {
            log.debug("SAML request signing is enabled.");
        }
        encodedSAMLAuthRequest = sso.client.getEncodedSAMLAuthRequest(storeConfig.ssoConfiguration.issuer, acsUrl,
                storeConfig.ssoConfiguration.identityProviderURL, isRequestSigningEnabled);
    } else {
        encodedSAMLAuthRequest = sso.client.getEncodedSAMLAuthRequest(storeConfig.ssoConfiguration.issuer);
    }

    if (log.isDebugEnabled()) {
        log.debug("SAML Request : " + encodedSAMLAuthRequest);
    }

    var relayStateURL = request.getRequestURL();
    if (customDomain) {
        // If a custom domain is set,
        // replace the segments enclosed with [], in https://[host/user-portal/t/tenant15.com]/home.jsp
        relayStateURL = relayStateURL.replace(/:\/\/.*\/t\/.+?\//g, "://" + customDomain + "/");
        if (log.isDebugEnabled()) {
            log.debug("Custom domain : " + customDomain + " is configured. RelayStateURL constructed accordingly." +
                    " RelayStateURL: " + relayStateURL);
        }
    } else if (reversProxyEnabled && reverseProxyHost) {
        relayStateURL = reverseProxyHost + requestURI;
        if (log.isDebugEnabled()) {
            log.debug("Reverse proxy enabled with host:  " + reverseProxyHost + ". RelayStateURL" +
                    " constructed accordingly. RelayStateURL: " + relayStateURL);
        }
    }

    // Persist relay state in session.
    var relayStateID = uuid.generate().toString();
    session.put(relayStateID, relayStateURL);

    if (!session.get("Loged")) {
        %>
            <div>
                <p>You are now being redirected to Identity Server. If the
                redirection fails, please click on the button below.</p>
                <form method="post" action="<%=postUrl%>">
                    <p>
                        <input type="hidden" name="SAMLRequest" value ="<%=encodedSAMLAuthRequest%>"/>
                        <input type="hidden" name="RelayState" value ="<%=relayStateID%>"/>
                        <input type="hidden" name="SSOAuthSessionID" value="<%=sessionId%>"/>
                <%
        if (applicationTenantDomain && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(applicationTenantDomain)) {
            %>
                        <input type="hidden" name="storeTenantDomain" value="<%=applicationTenantDomain%>"/>
                    <%
        }
        if (forceAuth && "true".equals(forceAuth)) {
            %>
                            <input type="hidden" name="forceAuth" value="<%=forceAuth%>"/>
                    <%
        }
        %>
                        <button type="submit">Redirect manually</button>
                    </p>
                </form>
             </div>
             <script type="text/javascript" >
                document.forms[0].submit();
             </script>
    <%
    }
}());
%>
