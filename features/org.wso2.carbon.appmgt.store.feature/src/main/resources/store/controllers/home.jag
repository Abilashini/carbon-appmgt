<%
//TODO : remove this and fix welcome page properly
//response.sendRedirect('.' + require('/store.js').config().assetsUrlPrefix + '/gadget');

var caramel;
var customType;

include('/extensions/assets/webapp/modules/jagg/jagg.jag');
var storeHostObj = jagg.module("manager").getAPIStoreObj();

require('/modules/store.js').exec(function (ctx) {
    var paging, count, current, loggedUser, manager, assets, length, recentDiff,
            popularDiff, recent, popular, type, process,
            log = ctx.log,
            query = ctx.params.query,
            tag = ctx.params.tag,
            sso = ctx.sso,
            store = ctx.store,
            user = ctx.user,
            tenantId = ctx.tenant.tenantId || -1234,
            storeTenantDomain = ctx.tenant.domain,
            configs = ctx.configs,
            site = ctx.site,
            matcher = ctx.matcher,
            first = true,
            recentCount = 10,
            popularCount = 10,
            items = [],
            popularItems = [],
            recentItems = [],
            options = {},
            types = store.assetTypes(),
            search = require('/modules/search.js'),
            utility = require('/modules/util.js'), isSubscribed,
            social = carbon.server.osgiService('org.wso2.carbon.social.core.service.SocialActivityService');

    caramel = require('caramel');


    var isSelfSignupEnabledForTenant = storeHostObj.isSelfSignupEnabledForTenant(String(storeTenantDomain));
    var subscriptionUtil = require('/themes/store/js/subscription-config.js');
    var isSelfSubscriptionEnabled = subscriptionUtil.isSelfSubscriptionEnabled();
    var isEnterpriseSubscriptionEnabled = subscriptionUtil.isEnterpriseSubscriptionEnabled();
    var enabledTypeList = storeHostObj.getEnabledAssetTypeList();

    var navigationData = {
        showAllAppsLink: true
    };
    //if both subscriptions off no need to show the link for all apps,
    //because all apps will be displayed in myapps page.
    if (!isSelfSubscriptionEnabled && !isEnterpriseSubscriptionEnabled) {
        navigationData.showAllAppsLink = false;
    }

    length = types.length;
    paging = store.assetsPaging(request);
    query = query ? search.build(String(query)) : null;

    var SITE_TYPE = 'site';
    var WEBAPP_TYPE = 'webapp';
    var MOBILEAPP_TYPE = 'mobileapp';
    var siteAttribute;
    var RECENT_APP_COUNT = Math.floor(store.getRecentAppCount().topAssetPage / length);

    types.forEach(function (type) {
        if(!storeHostObj.isAssetTypeEnabled(type)) {
            return
        }
        //Assign requested asset type to the customType. If the requested type is 'site' then set the type variable as
        //'webapp', since we used the 'webapp' rxt for the 'site' publishing in the publisher side.
        customType = type;
        if (type == SITE_TYPE) {
            type = WEBAPP_TYPE;
        }
        manager = store.rxtManager(customType, session);

        var isMultipleVersionDisplayEnabled = storeHostObj.isDisplayMultipleVersionsEnabled();
        if (log.isDebugEnabled()) {
            log.debug("Multiple version display in store is : " + isMultipleVersionDisplayEnabled);
        }
        if (query) {
            assets = store.search({
                                      attributes: query,
                                      tag: tag,
                                      type: type
                                  }, paging);
        } else if (tag) {
            assets = store.tagged(type, tag, paging);
        } else {
            if (customType == MOBILEAPP_TYPE) {
                assets = store.assets(customType, paging);
            } else {
                if (customType == SITE_TYPE) {
                    if (isMultipleVersionDisplayEnabled) {
                        //if multiple versions to be displayed don't consider default version
                        siteAttribute = {"overview_treatAsASite": "TRUE"};
                    } else {
                        siteAttribute = {
                            //if multiple versions to be displayed do consider default version
                            "overview_treatAsASite": "TRUE",
                            "overview_makeAsDefaultVersion": "true"
                        };
                    }
                } else if (customType == WEBAPP_TYPE) {
                    if (isMultipleVersionDisplayEnabled) {
                        //if multiple versions to be displayed don't consider default version
                        siteAttribute = {"overview_treatAsASite": "FALSE"};
                    } else {
                        //if multiple versions to be displayed do consider default version
                        siteAttribute = {
                            "overview_treatAsASite": "FALSE",
                            "overview_makeAsDefaultVersion": "true"
                        };
                    }
                }
                var siteOption = {
                    type: type,
                    attributes: siteAttribute
                };
                assets = store.search(siteOption, paging);
            }
        }


        assets.forEach(function (asset) {

            //set rating
            if (JSON.parse(social.getRating(type + ":" + asset.id))) {
                asset.rating = Math.floor(JSON.parse(social.getRating(type + ":" + asset.id)).rating);
            } else {
                asset.rating = 0;
            }
            if (type == WEBAPP_TYPE) {
                // set default thumbnail
                setDefaultThumbnail(asset);

                //Set access URL
                if (!isSelfSubscriptionEnabled && !isEnterpriseSubscriptionEnabled) {
                    //set direct app access url
                    if (asset.attributes.overview_skipGateway.toLowerCase() == "false") {
                        //Get the gateway url
                        var APIInformationService = require('/extensions/assets/webapp/services/api-information.js').serviceModule;
                        var apiInfoManager = new APIInformationService.APIInformationService();
                        apiInfoManager.init(jagg, session);
                        var appData = apiInfoManager.getAPIDescription(asset.attributes.overview_provider,
                                                                       asset.attributes.overview_name,
                                                                       asset.attributes.overview_version);
                        asset.accessUrl = appData.serverURL.productionURL;
                    } else {
                        //Get the direct webapp url
                        asset.accessUrl = asset.attributes.overview_webAppUrl;
                    }
                }
            }
        });


        items.push({
                       assets: assets,
                       plural: manager.pluralLabel,
                       singular: manager.singularLabel,
                       type: manager.shortName
                   });

    });


    caramel.render({
                       title: 'Apps | Store',
                       header: {
                           user: user,
                           sso: sso,
                           storeTenantDomain: storeTenantDomain,
                           enabledTypeList: enabledTypeList,
                           isSelfSignUpEnabledForTenant: isSelfSignupEnabledForTenant
                       },
                       tags: {
                           data: {}
                       },
                       config: {
                           isSelfSubscriptionEnabled: isSelfSubscriptionEnabled,
                           isEnterpriseSubscriptionEnabled: isEnterpriseSubscriptionEnabled,
                           enabledTypeList: enabledTypeList
                       },
                       navigation: navigationData,
                       topAssets: {
                           assets: items,
                           popularAssets: popularItems
                       },
                       recentAssets: recentItems
                   });
}, request, response, session);

function getServiceDir(serviceName) {
    return '/extensions/assets/webapp/services/' + serviceName;
}

/**
 * Sets the default thumbnail of the specified asset.
 * @param asset {Object} asset
 */
function setDefaultThumbnail(asset) {
    var assetThumbnail = asset.attributes.images_thumbnail;
    if (!assetThumbnail || (assetThumbnail.trim().length == 0)) {
        asset.defaultThumbnail = storeHostObj.getDefaultThumbnail(asset.attributes.overview_displayName);
    }
}

function setAccessURL(isSelfSubscriptionEnabled, isEnterpriseSubscriptionEnabled, asset, type) {


}
%>
