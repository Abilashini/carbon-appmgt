<%
/*
 *  Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

include('../modules/jagg/jagg.jag');
var caramel;
var AuthService;
var AppService;
var appInfoApi;
var authenticator;
var log = new Log();
var DocumentService = require('../services/documentation.js').serviceModule;
var docsManager = new DocumentService.DocumentationService();
docsManager.init(jagg, session);

var AppInformationService = require('../services/app-information.js').serviceModule;
var apiInfoManager = new AppInformationService.AppInformationService();
apiInfoManager.init(jagg, session);

AppService = require(getServiceDir('app.js')).serviceModule;
appInfoApi = new AppService.AppService();
appInfoApi.init(jagg, session);

AuthService = require(getServiceDir('authentication.js')).serviceModule;
authenticator = new AuthService.Authenticator();
authenticator.init(jagg, session);

var carbon = require('carbon');
var tenantIdVal = Packages.org.wso2.carbon.context.CarbonContext.getThreadLocalCarbonContext().getTenantId();

var WEBAPP_TYPE = 'webapp';
var SITE_TYPE = 'site';

require('/modules/store.js').exec(function (ctx) {
    var asset, applicationId, title,
            log = ctx.log,
            sso = ctx.sso,
            store = ctx.store,
            user = ctx.user,
            tenantId = ctx.tenantId,
            configs = ctx.configs,
            site = ctx.site,
            matcher = ctx.matcher,
            inDashboard = false,
            isSubscribed = false,
            skipGateway = false,
            webAppEndpoint;
    utility = require('/modules/util.js');
    search = require('/modules/search.js'),
            social = carbon.server.osgiService('org.wso2.carbon.social.core.service.SocialActivityService');
    caramel = require('caramel');

    var SITE_QUERY = {"overview_treatAsASite": "TRUE"};
    var SITE_OPTIONS = {
        type: type,
        attributes: SITE_QUERY
    };
    var RECENT_ASSET_COUNT = store.getRecentAppCount().assetPage;

    var tenantedUrl = '/{context}/t/{domain}' + configs.assetsUrlPrefix + '/{type}/{aid}';
    var defaultUrl = '/{context}' + configs.assetsUrlPrefix + '/{type}/{aid}';

    //Match the incoming request with tenanted and default URI patterns and extracts the relecant asset id
    if(matcher.match(defaultUrl) || matcher.match(tenantedUrl)){
        applicationId = matcher.elements().aid;
        title = store.assetLinks(type).title;
        currentTenant = matcher.elements().domain;
    }

    try {
        asset = store.asset(type, applicationId);
    } catch (e) {
        response.sendError(404, 'Requested page cannot be found');
        return;
    }

    var appRatingJson = JSON.parse(social.getRating(WEBAPP_TYPE + ":" + applicationId));
    if (appRatingJson) {
        asset.rating = Math.floor(appRatingJson.rating);
    } else {
        asset.rating = 0.0;
    }

    if (store.isuserasset(applicationId, type)) {
        inDashboard = true;
    }

    var rxtAttributes = utility.getRXTAttributes(tenantId, type);

    var ATTR_TREAT_AS_A_SITE = 'overview_treatAsASite';
    var ATTR_PROVIDER = 'overview_provider';
    var LIFECYCLE_STATE_PROPERTY = 'lcState';
    var DEFAULT_ASSET_VIEW_STATE = 'Published'; //Unless specified otherwise, assets are always visible when Published.
    var DEFAULT_LC_ATTRIBUTE_NAME = LIFECYCLE_STATE_PROPERTY;

    // Init subscription service.
    var subscriptionServiceModule = require('/extensions/assets/site/services/subscription.js').serviceModule;
    var subscriptionService = new subscriptionServiceModule.SubscriptionService();
    subscriptionService.init(jagg, session);

    var username = null;
    if (authenticator.getLoggedInUser()) {
        username = authenticator.getLoggedInUser().username;
    }

    /*
     The function obtains the assets published by the given provider.
     */
    var getAssetsFromProvider = function (asset, store) {
        var assetsFromProvider = {};
        var provider = asset.attributes[ATTR_PROVIDER];
        var searchOptions = {};
        var paging;

        searchOptions['attributes'] = {};
        searchOptions = obtainViewQuery(searchOptions);
        searchOptions['attributes'][ATTR_PROVIDER] = provider;
        searchOptions['attributes'][ATTR_TREAT_AS_A_SITE] = 'TRUE';
        paging = {start: 0, count: store.getRecentAppCount().fromProvider, sort: 'recent'};
        assetsFromProvider['overview_provider'] = provider;
        assetsFromProvider['type'] = type;
        assetsFromProvider['assets'] = store.search(searchOptions, paging)[asset.type] || [];

        //Remove the current asset from the assets list.
        for (var i = 0; i < assetsFromProvider.assets.length; i++) {
            if (assetsFromProvider.assets[i].id === asset.id) {
                assetsFromProvider.assets.splice(i, 1);
                break;
            }
        }

        return assetsFromProvider;
    }

    /*
     The function obtains the query used to search for assets.
     */
    var obtainViewQuery = function (options) {

        var storeConfig = require('/config/store.json').lifeCycleBehaviour;
        var visibleStates = storeConfig.visibleIn || DEFAULT_ASSET_VIEW_STATE;
        var attributeName = storeConfig.lcAttributeName || DEFAULT_LC_ATTRIBUTE_NAME;

        //Changed the query to check for overview_status as opposed to lifecycle state.
        options[attributeName] = visibleStates;

        return options;
    }

    var getSubscriptionInfo = function (asset) {

        // Get the enterprise subscription the individual subscription for this user for this app.    
        var appInfo = {};
        appInfo["name"] = asset.attributes.overview_name;
        appInfo["version"] = asset.attributes.overview_version;
        appInfo["provider"] = asset.attributes.overview_provider;

        var defaultApplicationName = "DefaultApplication";
        var enterpriseSubscription;
        enterpriseSubscription = subscriptionService.getSubscription(appInfo, defaultApplicationName, "ENTERPRISE",
                username).subscription;

        var individualSubscription;
        individualSubscription = subscriptionService.getSubscription(appInfo, defaultApplicationName, "INDIVIDUAL",
                username).subscription;

        // Get all available IDPs (enterprises).
        var enterprises = getEnterprises();

        var subscriptionInfo = {};

        subscriptionInfo["enterpriseSubscription"] = enterpriseSubscription;
        subscriptionInfo["individualSubscription"] = individualSubscription;
        subscriptionInfo["enterprises"] = enterprises;
        subscriptionInfo["viewData"] = getSubscriptionViewData(enterpriseSubscription, enterprises);

        return subscriptionInfo;
    }

    var getEnterprises = function () {
        var store = jagg.module("manager").getAPIStoreObj();
        var appName = asset.attributes.overview_name;
        var appVersion = asset.attributes.overview_version;
        var appProvider = asset.attributes.overview_provider;
        var result = null;
        var issuerName = null;
        var isEmailLoginEnabled = store.isEnableEmailUsername();

        //Check whether application author is a tenant.
        if (!isEmailLoginEnabled && appProvider != null && appProvider.indexOf("-AT-") != -1) {
            result = appProvider.split("-AT-");
        }
        if (result != null) {
            issuerName = appName + "-" + result[1] + "-" + appVersion;
        } else {
            issuerName = appName + "-" + appVersion;
        }

        var ssoProviderInfo = asset.attributes.sso_ssoProvider.split("-");

        var authResult = subscriptionService.getEnterprisesForApplication(
                {appName: issuerName, ssoProviderName: ssoProviderInfo[0], ssoProviderVersion: ssoProviderInfo[1]})

        return authResult.enterprises;

    }

    // Returns hbs friendly subscription info.
    var getSubscriptionViewData = function (enterpriseSubscription, enterprises) {

        var viewData = new Array();

        if (!enterprises) {
            return viewData;
        }

        // Create a Set of trusted IDPs in the enterprise subscription.
        var trustedIdpsSet = {};

        if (enterpriseSubscription) {
            var trustedIdps = JSON.parse(enterpriseSubscription.trustedIdps);

            for (var i = 0; i < trustedIdps.length; i++) {
                trustedIdpsSet[trustedIdps[i]] = true;
            }
        }

        for (var i = 0; i < enterprises.length; i++) {
            var viewEntry = {};
            viewEntry["enterprise"] = enterprises[i];
            viewEntry["subscribed"] = enterprises[i] in trustedIdpsSet;
            viewData.push(viewEntry);
        }

        return viewData;
    }

    function isStoreAdmin() {
        if (authenticator.getLoggedInUser()) {
            return hasUserRole("Internal/store-admin");
        }
        return false;
    }

    function hasUserRole(userRoleName) {
        var usr = require('carbon').server.tenantUser(user.username);
        var userManager = require('store').server.userManager(usr.tenantId);
        var roles = userManager.getRoleListOfUser(usr.username);
        var hasRole = false;

        for (var i = 0; i < roles.length; i++) {
            if (roles[i] == userRoleName) {
                hasRole = true;
                break;
            }
        }
        return hasRole;
    }

    var assetsByProvider = getAssetsFromProvider(asset, store);
    var docs;
    if (authenticator.getLoggedInUser()) {
        docs = docsManager.getAllDocumentation(asset.attributes.overview_provider,
                asset.attributes.overview_name,
                asset.attributes.overview_version,
                authenticator.getLoggedInUser().username);
    }
    else {
        docs = docsManager.getAllDocumentation(asset.attributes.overview_provider,
                asset.attributes.overview_name,
                asset.attributes.overview_version,
                null);
    }

    var apiData = apiInfoManager.getAppDescription(asset.attributes.overview_provider,
            asset.attributes.overview_name,
            asset.attributes.overview_version);
    var myApps = appInfoApi.getApplications(username);
    var availableTiers = apiInfoManager.getTiers();
    user = authenticator.getLoggedInUser();
    var subscriptionInfo = getSubscriptionInfo(asset);
    var isStoreAdmin = isStoreAdmin();

    if (subscriptionInfo.individualSubscription) {
        if (subscriptionInfo.individualSubscription.subscriptionStatus === "UNBLOCKED") {
            isSubscribed = true;
            subscriptionInfo.individualSubscription["OnHold"] = false;
        } else if (subscriptionInfo.individualSubscription.subscriptionStatus === "ON_HOLD") {
            subscriptionInfo.individualSubscription["OnHold"] = true;
        } else {
            subscriptionInfo.individualSubscription["OnHold"] = false;
        }
    }

    if (asset.attributes.overview_skipGateway == "true") {
        skipGateway = true;
    } else {
        skipGateway = false;
    }


    var process = require('process');
    //set local ip
    asset.attributes.localIP = "https://" + process.getProperty('server.host');
    //set http port
    asset.attributes.httpsPort = process.getProperty('https.port');

    for (var i = 0; i < assetsByProvider.assets.length; i++) {
        var appRatingByProviderJson = JSON.parse(social.getRating(WEBAPP_TYPE + ':' + assetsByProvider.assets[i].id));
        if (appRatingByProviderJson) {
            assetsByProvider.assets[i].rating = {average: Math.floor(appRatingByProviderJson.rating)};
        } else {
            assetsByProvider.assets[i].rating = 0;
        }
    }

    var recentAssets = store.recentAssets(type, RECENT_ASSET_COUNT, SITE_QUERY);

    for (var i = 0; i < recentAssets.length; i++) {
        var appRatingRecentAssets = JSON.parse(social.getRating(WEBAPP_TYPE + ':' + recentAssets[i].id));
        if (appRatingRecentAssets) {
            recentAssets[i].rating = {
                average: Math.floor(appRatingRecentAssets.rating)
            };
        } else {
            recentAssets[i].rating = 0;
        }
    }

    var isSite;
    if (customType == WEBAPP_TYPE) {
        isSite = 'false';
    } else if (customType == SITE_TYPE) {
        isSite = 'true';
    }

    caramel.render({
        title: 'Store | ' + type,
        user: user,
        sso: sso,

        header: site.header(tenantId, {
            sso: sso,
            user: user
        }),

        navigation: site.navigation(tenantId),
        search: {
            search: {title: type},
            isTopAssets: false,
            searchFields: search.fields()
        },
        isSocial: configs.socialCommentsEnable,

        type: type,
        embedURL: configs.server.http + '/gadgets/ifr?url=' + asset.attributes.overview_url,
        inDashboard: inDashboard,
        isSubscribed: isSubscribed,
        skipGateway: skipGateway,
        webAppEndpoint: webAppEndpoint,
        subscriptionInfo: subscriptionInfo,
        isEnterpriseSubscriptionAllowed: isStoreAdmin,
        asset: asset,
        tenantId: tenantIdVal,
        tags: [
            {
                url: '/assets/' + customType + '/?page=1&tag=',
                data: store.tags(type, isSite)
            }
        ],
        myAssets: {user: user, type: type, title: title},
        recentAssets: recentAssets,
        assetsByProvider: assetsByProvider,
        documentation: docs,
        apiData: apiData,
        metadata: {
            myapps: myApps,
            tiers: availableTiers,
            api: apiData,
            apiAssetData: asset
        }
    });

}, request, response, session);

function getServiceDir(serviceName) {
    return '../services/' + serviceName;
}
%>
